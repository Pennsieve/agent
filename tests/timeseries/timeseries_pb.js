/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AgentTimeSeriesResponse', null, global);
goog.exportSymbol('proto.ChannelChunk', null, global);
goog.exportSymbol('proto.ChunkResponse', null, global);
goog.exportSymbol('proto.Datum', null, global);
goog.exportSymbol('proto.Segment', null, global);
goog.exportSymbol('proto.StateMessage', null, global);
goog.exportSymbol('proto.TimeSeriesMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Segment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Segment.repeatedFields_, null);
};
goog.inherits(proto.Segment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Segment.displayName = 'proto.Segment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Segment.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Segment.prototype.toObject = function(opt_includeInstance) {
  return proto.Segment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Segment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Segment.toObject = function(includeInstance, msg) {
  var f, obj = {
    startts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastused: jspb.Message.getFieldWithDefault(msg, 3, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sampleperiod: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    requestedsampleperiod: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    pagestart: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isminmax: jspb.Message.getFieldWithDefault(msg, 8, false),
    unitm: jspb.Message.getFieldWithDefault(msg, 9, 0),
    segmenttype: jspb.Message.getFieldWithDefault(msg, 10, ""),
    nrpoints: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dataList: jspb.Message.getRepeatedFloatingPointField(msg, 12),
    pageend: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Segment}
 */
proto.Segment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Segment;
  return proto.Segment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Segment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Segment}
 */
proto.Segment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastused(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSampleperiod(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRequestedsampleperiod(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagestart(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsminmax(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnitm(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSegmenttype(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNrpoints(value);
      break;
    case 12:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDataList(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPageend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Segment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Segment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Segment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Segment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartts();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastused();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSampleperiod();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getRequestedsampleperiod();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getPagestart();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getIsminmax();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getUnitm();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getSegmenttype();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getNrpoints();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedDouble(
      12,
      f
    );
  }
  f = message.getPageend();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional uint64 startTs = 1;
 * @return {number}
 */
proto.Segment.prototype.getStartts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Segment.prototype.setStartts = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.Segment.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Segment.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 lastUsed = 3;
 * @return {number}
 */
proto.Segment.prototype.getLastused = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Segment.prototype.setLastused = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string unit = 4;
 * @return {string}
 */
proto.Segment.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Segment.prototype.setUnit = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double samplePeriod = 5;
 * @return {number}
 */
proto.Segment.prototype.getSampleperiod = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Segment.prototype.setSampleperiod = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double requestedSamplePeriod = 6;
 * @return {number}
 */
proto.Segment.prototype.getRequestedsampleperiod = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Segment.prototype.setRequestedsampleperiod = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint64 pageStart = 7;
 * @return {number}
 */
proto.Segment.prototype.getPagestart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Segment.prototype.setPagestart = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool isMinMax = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Segment.prototype.getIsminmax = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.Segment.prototype.setIsminmax = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint64 unitM = 9;
 * @return {number}
 */
proto.Segment.prototype.getUnitm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Segment.prototype.setUnitm = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string segmentType = 10;
 * @return {string}
 */
proto.Segment.prototype.getSegmenttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Segment.prototype.setSegmenttype = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 nrPoints = 11;
 * @return {number}
 */
proto.Segment.prototype.getNrpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Segment.prototype.setNrpoints = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated double data = 12;
 * @return {!Array.<number>}
 */
proto.Segment.prototype.getDataList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 12));
};


/** @param {!Array.<number>} value */
proto.Segment.prototype.setDataList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Segment.prototype.addData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.Segment.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * optional uint64 pageEnd = 13;
 * @return {number}
 */
proto.Segment.prototype.getPageend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Segment.prototype.setPageend = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimeSeriesMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimeSeriesMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimeSeriesMessage.displayName = 'proto.TimeSeriesMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimeSeriesMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.TimeSeriesMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimeSeriesMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeSeriesMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    segment: (f = msg.getSegment()) && proto.Segment.toObject(includeInstance, f),
    totalresponses: jspb.Message.getFieldWithDefault(msg, 7, 0),
    responsesequenceid: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimeSeriesMessage}
 */
proto.TimeSeriesMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimeSeriesMessage;
  return proto.TimeSeriesMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimeSeriesMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimeSeriesMessage}
 */
proto.TimeSeriesMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.Segment;
      reader.readMessage(value,proto.Segment.deserializeBinaryFromReader);
      msg.setSegment(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalresponses(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResponsesequenceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimeSeriesMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimeSeriesMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimeSeriesMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimeSeriesMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Segment.serializeBinaryToWriter
    );
  }
  f = message.getTotalresponses();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getResponsesequenceid();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional Segment segment = 3;
 * @return {?proto.Segment}
 */
proto.TimeSeriesMessage.prototype.getSegment = function() {
  return /** @type{?proto.Segment} */ (
    jspb.Message.getWrapperField(this, proto.Segment, 3));
};


/** @param {?proto.Segment|undefined} value */
proto.TimeSeriesMessage.prototype.setSegment = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TimeSeriesMessage.prototype.clearSegment = function() {
  this.setSegment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TimeSeriesMessage.prototype.hasSegment = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 totalResponses = 7;
 * @return {number}
 */
proto.TimeSeriesMessage.prototype.getTotalresponses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TimeSeriesMessage.prototype.setTotalresponses = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 responseSequenceId = 8;
 * @return {number}
 */
proto.TimeSeriesMessage.prototype.getResponsesequenceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.TimeSeriesMessage.prototype.setResponsesequenceid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Datum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Datum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Datum.displayName = 'proto.Datum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Datum.prototype.toObject = function(opt_includeInstance) {
  return proto.Datum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Datum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Datum.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Datum}
 */
proto.Datum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Datum;
  return proto.Datum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Datum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Datum}
 */
proto.Datum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Datum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Datum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Datum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Datum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional uint64 time = 1;
 * @return {number}
 */
proto.Datum.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Datum.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.Datum.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Datum.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChannelChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChannelChunk.repeatedFields_, null);
};
goog.inherits(proto.ChannelChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChannelChunk.displayName = 'proto.ChannelChunk';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChannelChunk.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChannelChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.ChannelChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChannelChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChannelChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.Datum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChannelChunk}
 */
proto.ChannelChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChannelChunk;
  return proto.ChannelChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChannelChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChannelChunk}
 */
proto.ChannelChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Datum;
      reader.readMessage(value,proto.Datum.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChannelChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChannelChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChannelChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChannelChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Datum.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ChannelChunk.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ChannelChunk.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Datum data = 2;
 * @return {!Array.<!proto.Datum>}
 */
proto.ChannelChunk.prototype.getDataList = function() {
  return /** @type{!Array.<!proto.Datum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Datum, 2));
};


/** @param {!Array.<!proto.Datum>} value */
proto.ChannelChunk.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Datum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Datum}
 */
proto.ChannelChunk.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Datum, opt_index);
};


proto.ChannelChunk.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChunkResponse.repeatedFields_, null);
};
goog.inherits(proto.ChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChunkResponse.displayName = 'proto.ChunkResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChunkResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.ChannelChunk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChunkResponse}
 */
proto.ChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChunkResponse;
  return proto.ChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChunkResponse}
 */
proto.ChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ChannelChunk;
      reader.readMessage(value,proto.ChannelChunk.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ChannelChunk.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChannelChunk channels = 1;
 * @return {!Array.<!proto.ChannelChunk>}
 */
proto.ChunkResponse.prototype.getChannelsList = function() {
  return /** @type{!Array.<!proto.ChannelChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChannelChunk, 1));
};


/** @param {!Array.<!proto.ChannelChunk>} value */
proto.ChunkResponse.prototype.setChannelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ChannelChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChannelChunk}
 */
proto.ChunkResponse.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ChannelChunk, opt_index);
};


proto.ChunkResponse.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StateMessage.displayName = 'proto.StateMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.StateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StateMessage}
 */
proto.StateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StateMessage;
  return proto.StateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StateMessage}
 */
proto.StateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.StateMessage.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StateMessage.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.StateMessage.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.StateMessage.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AgentTimeSeriesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AgentTimeSeriesResponse.oneofGroups_);
};
goog.inherits(proto.AgentTimeSeriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AgentTimeSeriesResponse.displayName = 'proto.AgentTimeSeriesResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AgentTimeSeriesResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.AgentTimeSeriesResponse.ResponseOneofCase = {
  RESPONSE_ONEOF_NOT_SET: 0,
  STATE: 1,
  CHUNK: 2
};

/**
 * @return {proto.AgentTimeSeriesResponse.ResponseOneofCase}
 */
proto.AgentTimeSeriesResponse.prototype.getResponseOneofCase = function() {
  return /** @type {proto.AgentTimeSeriesResponse.ResponseOneofCase} */(jspb.Message.computeOneofCase(this, proto.AgentTimeSeriesResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AgentTimeSeriesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AgentTimeSeriesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AgentTimeSeriesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentTimeSeriesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.StateMessage.toObject(includeInstance, f),
    chunk: (f = msg.getChunk()) && proto.ChunkResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AgentTimeSeriesResponse}
 */
proto.AgentTimeSeriesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AgentTimeSeriesResponse;
  return proto.AgentTimeSeriesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AgentTimeSeriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AgentTimeSeriesResponse}
 */
proto.AgentTimeSeriesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StateMessage;
      reader.readMessage(value,proto.StateMessage.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.ChunkResponse;
      reader.readMessage(value,proto.ChunkResponse.deserializeBinaryFromReader);
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AgentTimeSeriesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AgentTimeSeriesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AgentTimeSeriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AgentTimeSeriesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StateMessage.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ChunkResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional StateMessage state = 1;
 * @return {?proto.StateMessage}
 */
proto.AgentTimeSeriesResponse.prototype.getState = function() {
  return /** @type{?proto.StateMessage} */ (
    jspb.Message.getWrapperField(this, proto.StateMessage, 1));
};


/** @param {?proto.StateMessage|undefined} value */
proto.AgentTimeSeriesResponse.prototype.setState = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.AgentTimeSeriesResponse.oneofGroups_[0], value);
};


proto.AgentTimeSeriesResponse.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AgentTimeSeriesResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChunkResponse chunk = 2;
 * @return {?proto.ChunkResponse}
 */
proto.AgentTimeSeriesResponse.prototype.getChunk = function() {
  return /** @type{?proto.ChunkResponse} */ (
    jspb.Message.getWrapperField(this, proto.ChunkResponse, 2));
};


/** @param {?proto.ChunkResponse|undefined} value */
proto.AgentTimeSeriesResponse.prototype.setChunk = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.AgentTimeSeriesResponse.oneofGroups_[0], value);
};


proto.AgentTimeSeriesResponse.prototype.clearChunk = function() {
  this.setChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AgentTimeSeriesResponse.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
